// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: encryption/v1/encryption.proto

package encryptionv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EncryptionService_Encrypt_FullMethodName         = "/encryption.v1.EncryptionService/Encrypt"
	EncryptionService_Decrypt_FullMethodName         = "/encryption.v1.EncryptionService/Decrypt"
	EncryptionService_GenerateKeyPair_FullMethodName = "/encryption.v1.EncryptionService/GenerateKeyPair"
	EncryptionService_RotateKeyPair_FullMethodName   = "/encryption.v1.EncryptionService/RotateKeyPair"
)

// EncryptionServiceClient is the client API for EncryptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EncryptionServiceClient interface {
	Encrypt(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EncryptRequest, EncryptResponse], error)
	Decrypt(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DecryptRequest, DecryptResponse], error)
	GenerateKeyPair(ctx context.Context, in *GenerateKeyPairRequest, opts ...grpc.CallOption) (*GenerateKeyPairResponse, error)
	RotateKeyPair(ctx context.Context, in *RotateKeyPairRequest, opts ...grpc.CallOption) (*RotateKeyPairResponse, error)
}

type encryptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEncryptionServiceClient(cc grpc.ClientConnInterface) EncryptionServiceClient {
	return &encryptionServiceClient{cc}
}

func (c *encryptionServiceClient) Encrypt(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EncryptRequest, EncryptResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EncryptionService_ServiceDesc.Streams[0], EncryptionService_Encrypt_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EncryptRequest, EncryptResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EncryptionService_EncryptClient = grpc.BidiStreamingClient[EncryptRequest, EncryptResponse]

func (c *encryptionServiceClient) Decrypt(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DecryptRequest, DecryptResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EncryptionService_ServiceDesc.Streams[1], EncryptionService_Decrypt_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DecryptRequest, DecryptResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EncryptionService_DecryptClient = grpc.BidiStreamingClient[DecryptRequest, DecryptResponse]

func (c *encryptionServiceClient) GenerateKeyPair(ctx context.Context, in *GenerateKeyPairRequest, opts ...grpc.CallOption) (*GenerateKeyPairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateKeyPairResponse)
	err := c.cc.Invoke(ctx, EncryptionService_GenerateKeyPair_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *encryptionServiceClient) RotateKeyPair(ctx context.Context, in *RotateKeyPairRequest, opts ...grpc.CallOption) (*RotateKeyPairResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RotateKeyPairResponse)
	err := c.cc.Invoke(ctx, EncryptionService_RotateKeyPair_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EncryptionServiceServer is the server API for EncryptionService service.
// All implementations must embed UnimplementedEncryptionServiceServer
// for forward compatibility.
type EncryptionServiceServer interface {
	Encrypt(grpc.BidiStreamingServer[EncryptRequest, EncryptResponse]) error
	Decrypt(grpc.BidiStreamingServer[DecryptRequest, DecryptResponse]) error
	GenerateKeyPair(context.Context, *GenerateKeyPairRequest) (*GenerateKeyPairResponse, error)
	RotateKeyPair(context.Context, *RotateKeyPairRequest) (*RotateKeyPairResponse, error)
	mustEmbedUnimplementedEncryptionServiceServer()
}

// UnimplementedEncryptionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEncryptionServiceServer struct{}

func (UnimplementedEncryptionServiceServer) Encrypt(grpc.BidiStreamingServer[EncryptRequest, EncryptResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Encrypt not implemented")
}
func (UnimplementedEncryptionServiceServer) Decrypt(grpc.BidiStreamingServer[DecryptRequest, DecryptResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Decrypt not implemented")
}
func (UnimplementedEncryptionServiceServer) GenerateKeyPair(context.Context, *GenerateKeyPairRequest) (*GenerateKeyPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateKeyPair not implemented")
}
func (UnimplementedEncryptionServiceServer) RotateKeyPair(context.Context, *RotateKeyPairRequest) (*RotateKeyPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateKeyPair not implemented")
}
func (UnimplementedEncryptionServiceServer) mustEmbedUnimplementedEncryptionServiceServer() {}
func (UnimplementedEncryptionServiceServer) testEmbeddedByValue()                           {}

// UnsafeEncryptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EncryptionServiceServer will
// result in compilation errors.
type UnsafeEncryptionServiceServer interface {
	mustEmbedUnimplementedEncryptionServiceServer()
}

func RegisterEncryptionServiceServer(s grpc.ServiceRegistrar, srv EncryptionServiceServer) {
	// If the following call pancis, it indicates UnimplementedEncryptionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EncryptionService_ServiceDesc, srv)
}

func _EncryptionService_Encrypt_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EncryptionServiceServer).Encrypt(&grpc.GenericServerStream[EncryptRequest, EncryptResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EncryptionService_EncryptServer = grpc.BidiStreamingServer[EncryptRequest, EncryptResponse]

func _EncryptionService_Decrypt_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EncryptionServiceServer).Decrypt(&grpc.GenericServerStream[DecryptRequest, DecryptResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EncryptionService_DecryptServer = grpc.BidiStreamingServer[DecryptRequest, DecryptResponse]

func _EncryptionService_GenerateKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateKeyPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).GenerateKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncryptionService_GenerateKeyPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).GenerateKeyPair(ctx, req.(*GenerateKeyPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EncryptionService_RotateKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RotateKeyPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EncryptionServiceServer).RotateKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EncryptionService_RotateKeyPair_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EncryptionServiceServer).RotateKeyPair(ctx, req.(*RotateKeyPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EncryptionService_ServiceDesc is the grpc.ServiceDesc for EncryptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EncryptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "encryption.v1.EncryptionService",
	HandlerType: (*EncryptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateKeyPair",
			Handler:    _EncryptionService_GenerateKeyPair_Handler,
		},
		{
			MethodName: "RotateKeyPair",
			Handler:    _EncryptionService_RotateKeyPair_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Encrypt",
			Handler:       _EncryptionService_Encrypt_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Decrypt",
			Handler:       _EncryptionService_Decrypt_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "encryption/v1/encryption.proto",
}
